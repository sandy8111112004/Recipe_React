{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","DirectoryView","props","react_default","a","createElement","src_SearchForm","changeHandler","handleChange","value","searchHandler","handleSearch","allRecipe","map","e","i","src_RecipeCard","name","RecipeSelector","selectRecipes","key","SearchForm","id","onChange","onClick","RecipeCard","className","DetailedRecipe","dist_default","width","gap","ingredients","src_DetailedIngredient","element","instructions","src_DetailedInstruction","DetailedIngredient","DetailedInstruction","PageTitle","App","state","Recipes","input","selected","displayEntry","preventDefault","_this","setState","target","event","RecipeFiltered","filter","indexOf","toUpperCase","src_PageTitle","src_DirectoryView","this","src_DetailedRecipe","React","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dc46d50.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from 'react-css-grid';\nimport './reset.css';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst DirectoryView = (props)=>(\n    <div>\n        <SearchForm \n        changeHandler={props.handleChange} \n        value={props.value} \n        searchHandler={props.handleSearch}\n        />\n        <br/>\n        {props.allRecipe.map((e,i)=> <RecipeCard name={e.name} RecipeSelector = {props.selectRecipes}  key={i}/>)}\n    </div>\n)\n\nconst SearchForm = (props)=>(\n    <div>\n        <form>\n            <input id='searchInput' value ={props.value} onChange={props.changeHandler}></input>\n            <button onClick={props.searchHandler} id='searchBtn'>SEARCH</button>\n        </form>\n    </div>\n)\n\nconst RecipeCard = (props)=>(\n    <div >\n        <button className='entry' onClick={props.RecipeSelector}>{props.name}</button>\n    </div>\n)\n\nconst DetailedRecipe = (props) =>(\n    <div>\n        <h1><i className=\"fas fa-utensils foodIcon\"></i>  {props.name}</h1>\n        <br/>\n        <br/>\n        <Grid width='10vw' gap={0}>\n            <div>\n                <h4><b>INGREDIENTS:</b></h4>\n                <br/>\n                {props.ingredients.map((e,i)=> <DetailedIngredient element={e} key={i} />)}\n            </div>\n            <div>\n                <h4><b>INSTRUCTIONS:</b></h4>\n                <br/>\n                {props.instructions.map((e,i)=> <DetailedInstruction element={e} key={i}  />)}\n            </div>\n        </Grid>\n    </div>\n)\n\nconst DetailedIngredient = (props) =>(\n    <div>\n        <p>{props.element}</p>\n    </div>\n)\n\nconst DetailedInstruction = (props) => (\n    <div>\n        <p>{props.element}</p>\n    </div>\n)\n\nconst PageTitle = (props) => (\n    <div>\n        <h2 id='title-style'><i className=\"fas fa-utensils titleIcon\"></i> RecipeApp</h2>\n    </div>\n)\n\nclass App extends React.Component {\n    state={\n        Recipes:[\n            {\n            id: 1,\n            name: 'TURKEY + STUFF',\n            ingredients: ['Turkey', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the turkey', 'Cut some celery']\n          },\n          {\n            id: 2,\n            name: 'CHICKEN + STUFF',\n            ingredients: ['Chicken', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the chicken', 'Cut some celery']\n          },\n          {\n            id: 3,\n            name: 'BEEF + STUFF',\n            ingredients: ['Beef', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the beef', 'Cut some celery']\n          },\n          {\n            id: 4,\n            name: 'PPORK + STUFF',\n            ingredients: ['Pork', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the pork', 'Cut some celery']\n          },\n          {\n            id: 5,\n            name: 'FISH + STUFF',\n            ingredients: ['Fish', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the fish', 'Cut some celery']\n          }\n        ],\n        input:'',\n        selected:[\n            {\n            id: 1,\n            name: 'TURKEY + STUFF',\n            ingredients: ['Turkey', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the turkey', 'Cut some celery']\n          },\n          {\n            id: 2,\n            name: 'CHICKEN + STUFF',\n            ingredients: ['Chicken', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the chicken', 'Cut some celery']\n          },\n          {\n            id: 3,\n            name: 'BEEF + STUFF',\n            ingredients: ['Beef', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the beef', 'Cut some celery']\n          },\n          {\n            id: 4,\n            name: 'PPORK + STUFF',\n            ingredients: ['Pork', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the pork', 'Cut some celery']\n          },\n          {\n            id: 5,\n            name: 'FISH + STUFF',\n            ingredients: ['Fish', 'Mustard', 'Greens', 'Celery', 'Potato'],\n            instructions: ['Pre-heat over to 350', 'Tickle the fish', 'Cut some celery']\n          }\n        ],\n        displayEntry: []\n    }\n\n    handleChange = (e) =>{\n        e.preventDefault();\n        this.setState({input:e.target.value});\n    }\n\n    handleSearch = (event) => {\n        event.preventDefault();\n        const RecipeFiltered = this.state.Recipes.filter(e => e.name.indexOf(this.state.input.toUpperCase()) !== -1 );\n        this.setState({ selected: RecipeFiltered });\n    }\n\n    selectRecipes = (e) =>{\n        e.preventDefault();\n        const RecipeFiltered = this.state.Recipes.filter(e => e.name.indexOf(this.state.input.toUpperCase()) !== -1 );\n        this.setState({ selected: RecipeFiltered });\n\n    }\n\n    render() {\n        return (\n            <div id=\"main-return\">\n                <PageTitle />\n                <Grid width='47vw' gap={0}>\n                    <div className=\"box\">\n                    <DirectoryView \n                        allRecipe = {this.state.selected}\n                        handleChange = {this.handleChange}\n                        handleSearch = {this.handleSearch}\n                        selectRecipes = {this.selectRecipes}\n                        value={this.state.input}\n                    />\n                    </div>\n                    <div className=\"box\">\n                    <DetailedRecipe \n                        name = { this.state.selected[0].name}\n                        ingredients = {this.state.selected[0].ingredients}\n                        instructions = {this.state.selected[0].instructions}\n                    />\n                    </div>\n                </Grid>\n            </div>\n        )\n    }\n\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}