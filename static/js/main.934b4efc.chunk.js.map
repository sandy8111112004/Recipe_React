{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","DirectoryView","props","react_default","a","createElement","src_SearchForm","changeHandler","handleChange","value","searchHandler","handleSearch","allRecipe","map","e","i","src_RecipeCard","name","key","SearchForm","onChange","onClick","RecipeCard","recipeSelector","DetailedRecipe","ingredients","instructions","App","state","Recipes","id","input","selected","preventDefault","_this","setState","target","event","RecipeFiltered","filter","indexOf","src_DirectoryView","this","src_DetailedRecipe","React","Component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAgB,SAACC,GAAD,OAClBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAD,CACAC,cAAeL,EAAMM,aACrBC,MAAOP,EAAMO,MACbC,cAAeR,EAAMS,eAGpBT,EAAMU,UAAUC,IAAI,SAACC,EAAEC,GAAH,OAAQZ,EAAAC,EAAAC,cAACW,EAAD,CAAYC,KAAMH,EAAEG,KAAOC,IAAKH,QAI/DI,EAAa,SAACjB,GAAD,OACfC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,SAAOI,MAAQP,EAAMO,MAAOW,SAAUlB,EAAMK,gBAC5CJ,EAAAC,EAAAC,cAAA,UAAQgB,QAASnB,EAAMQ,eAAvB,aAKNY,EAAa,SAACpB,GAAD,OACfC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,KAAGgB,QAASnB,EAAMqB,gBAAiBrB,EAAMe,QAI3CO,EAAiB,SAACtB,GAAD,OACnBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kBAAUH,EAAMe,MAChBd,EAAAC,EAAAC,cAAA,yBAAiBH,EAAMuB,aACvBtB,EAAAC,EAAAC,cAAA,0BAAkBH,EAAMwB,aAAxB,OAKFC,6MACFC,MAAM,CACFC,QAAQ,CACJ,CACAC,GAAI,EACJb,KAAM,iBACNQ,YAAa,CAAC,SAAU,UAAW,SAAU,SAAU,UACvDC,aAAc,CAAC,uBAAwB,oBAAqB,oBAE9D,CACEI,GAAI,EACJb,KAAM,kBACNQ,YAAa,CAAC,UAAW,UAAW,SAAU,SAAU,UACxDC,aAAc,CAAC,uBAAwB,qBAAsB,oBAE/D,CACEI,GAAI,EACJb,KAAM,eACNQ,YAAa,CAAC,OAAQ,UAAW,SAAU,SAAU,UACrDC,aAAc,CAAC,uBAAwB,kBAAmB,oBAE5D,CACEI,GAAI,EACJb,KAAM,eACNQ,YAAa,CAAC,OAAQ,UAAW,SAAU,SAAU,UACrDC,aAAc,CAAC,uBAAwB,kBAAmB,oBAE5D,CACEI,GAAI,EACJb,KAAM,eACNQ,YAAa,CAAC,OAAQ,UAAW,SAAU,SAAU,UACrDC,aAAc,CAAC,uBAAwB,kBAAmB,qBAG9DK,MAAM,GACNC,SAAS,MAGbxB,aAAe,SAACM,GACZA,EAAEmB,iBACFC,EAAKC,SAAS,CAACJ,MAAMjB,EAAEsB,OAAO3B,WAGlCE,aAAe,SAAC0B,GACZA,EAAMJ,iBACN,IAAMK,EAAiBJ,EAAKN,MAAMC,QAAQU,OAAO,SAAAzB,GAAC,OAA0C,IAAtCA,EAAEG,KAAKuB,QAAQN,EAAKN,MAAMG,SAChFG,EAAKC,SAAS,CAAEN,QAASS,6EAWzB,OACInC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoC,EAAD,CACI7B,UAAa8B,KAAKd,MAAMC,QACxBrB,aAAgBkC,KAAKlC,aACrBG,aAAgB+B,KAAK/B,aAErBF,MAAOiC,KAAKd,MAAMG,QAEtB5B,EAAAC,EAAAC,cAACsC,EAAD,CACI1B,KAASyB,KAAKd,MAAMC,QAAQ,GAAGZ,KAC/BQ,YAAeiB,KAAKd,MAAMC,QAAQ,GAAGJ,YACrCC,aAAgBgB,KAAKd,MAAMC,QAAQ,GAAGH,uBArExCkB,IAAMC,WA6ExBC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDU3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.934b4efc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst DirectoryView = (props)=>(\n    <div>\n        <SearchForm \n        changeHandler={props.handleChange} \n        value={props.value} \n        searchHandler={props.handleSearch}\n        //RecipeSelector = {props.selectRecipes}\n        />\n        {props.allRecipe.map((e,i)=> <RecipeCard name={e.name}  key={i}/>)}\n    </div>\n)\n\nconst SearchForm = (props)=>(\n    <div>\n        <form>\n            <input value ={props.value} onChange={props.changeHandler}></input>\n            <button onClick={props.searchHandler}>Search</button>\n        </form>\n    </div>\n)\n\nconst RecipeCard = (props)=>(\n    <div>\n        <p onClick={props.recipeSelector}>{props.name}</p>\n    </div>\n)\n\nconst DetailedRecipe = (props) =>(\n    <div>\n        <p>name: {props.name}</p>\n        <p>ingredients: {props.ingredients}</p>\n        <p>instructions: {props.instructions} </p>\n    </div>\n)\n\n\nclass App extends React.Component {\n    state={\n        Recipes:[\n            {\n            id: 1,\n            name: 'turkey + stuff',\n            ingredients: ['turkey', 'mustard', 'greens', 'celery', 'potato'],\n            instructions: ['pre-heat over to 350', 'tickle the turkey', 'cut some celery']\n          },\n          {\n            id: 2,\n            name: 'chicken + stuff',\n            ingredients: ['chicken', 'mustard', 'greens', 'celery', 'potato'],\n            instructions: ['pre-heat over to 350', 'tickle the chicken', 'cut some celery']\n          },\n          {\n            id: 3,\n            name: 'beef + stuff',\n            ingredients: ['beef', 'mustard', 'greens', 'celery', 'potato'],\n            instructions: ['pre-heat over to 350', 'tickle the beef', 'cut some celery']\n          },\n          {\n            id: 4,\n            name: 'pork + stuff',\n            ingredients: ['pork', 'mustard', 'greens', 'celery', 'potato'],\n            instructions: ['pre-heat over to 350', 'tickle the pork', 'cut some celery']\n          },\n          {\n            id: 5,\n            name: 'fish + stuff',\n            ingredients: ['fish', 'mustard', 'greens', 'celery', 'potato'],\n            instructions: ['pre-heat over to 350', 'tickle the fish', 'cut some celery']\n          }\n        ],\n        input:'',\n        selected:[],\n    }\n\n    handleChange = (e) =>{\n        e.preventDefault();\n        this.setState({input:e.target.value});\n    }\n\n    handleSearch = (event) => {\n        event.preventDefault();\n        const RecipeFiltered = this.state.Recipes.filter(e => e.name.indexOf(this.state.input) !== -1 );\n        this.setState({ Recipes: RecipeFiltered });\n    }\n\n    // selectRecipes = (e) =>{\n    //     e.preventDefault();\n    //     const RecipeFiltered = this.state.Recipes.filter(e => e.name.indexOf(this.state.input) !== -1 );\n    //     this.setState({ selected: RecipeFiltered });\n\n    // }\n\n    render() {\n        return (\n            <div>\n                <DirectoryView \n                    allRecipe = {this.state.Recipes}\n                    handleChange = {this.handleChange}\n                    handleSearch = {this.handleSearch}\n                    //selectRecipes = {this.selectRecipes}\n                    value={this.state.input}\n                />\n                <DetailedRecipe \n                    name = { this.state.Recipes[0].name}\n                    ingredients = {this.state.Recipes[0].ingredients}\n                    instructions = {this.state.Recipes[0].instructions}\n                />\n            </div>\n        )\n    }\n\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}